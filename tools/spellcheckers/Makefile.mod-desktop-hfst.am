## Process this file with automake to produce Makefile.in

## Copyright (C) 2011 Samediggi

## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This is the default weight for all editing operations in the error model:
DEFAULT_WEIGHT=100

# Whether to use swaps - ..ab.. -> ..ba.. in one single operation.
# NB! Beware that this increases the size of the errormodel by ~ 3 * S^2, where
# S is the size of the alphabet. Ie by A LOT.
# If you want to enable swaps, consider using an edit distance of only 1, or
# better yet, dot NOT include UPPERCASE LETTERS in the error model alphabet.
#
# Possible values are 'yes' or 'no'
USE_SWAPS=yes

# Edit distanse for the Levenshtein error model:
EDIT_DISTANCE=1

# Define whether we allow changes to the initial letter(s) in the error model,
# possible values are:
# * no    - no longer string edits = only the default, letter-based error model
# * txt   - use only the txt file as source
# * regex - use only the regex file as source
# * both  - use both the txt and regex files as sources
# NB!!! Setting this to anything but 'no' will greatly increase the size and
# search space of the error model, and thus make it much, much slower. Make sure
# you TEST the resulting error model properly and thoroughly, both for speed
# and suggestion quality.
INITIAL_EDITS=no

# Variable to define whether to enable edits of longer strings (as opposed to
# single letters). Possible values are:
# * no    - no longer string edits = only the default, letter-based error model
# * txt   - use only the txt file as source
# * regex - use only the regex file as source
# * both  - use both the txt and regex files as sources
STRING_EDITS=no
# Variable to specify the edit distance for the regex
# version of the strings file. The total edit distance for those operations is
# this value multiplied with the value of the EDIT_DISTANCE variable.
STRING_REGEX_EDIT_DISTANCE=2

# Variable to define whether to enable edits of word-final strings (as opposed
# to single letters). Possible values are:
# * no    - no longer string edits = only the default, letter-based error model
# * txt   - use only the txt file as source
# * regex - use only the regex file as source
# * both  - use both the txt and regex files as sources
FINAL_STRING_EDITS=txt

# Variable to define whether to enable whole-word replacements. Possible values:
# - yes
# - no
WORD_REPLACEMENTS=no

### BEGIN: Local build rules for speller transducer: *.hfst ###
# This is a near-copy of the default ruleset
# Reasons for a language-specific routine for building a transducer:
# 1. Tokens ending with a dot (e.g. abbreviations) need special treament by a tokeniser
# They cannot be a part of the analyser that the tokeniser uses
# Therefore, dot-ending stuff must be added separately to the default descriptive analyser 
# 2. Certain paths have to be deleted from the descriptive analyser
# 3. Derived proper strings have been downcased already when building the raw analyser; 
# no need to do this again 

generator-speller-gt-norm.hfst: \
			$(top_builddir)/src/analyser-raw-gt-desc.hfst                     \
			$(top_builddir)/src/fst/abbrevdot.tmp.hfst \
			$(top_builddir)/src/filters/remove-CLB-strings.hfst               \
			$(top_builddir)/src/filters/remove-error-strings.hfst             \
			$(top_builddir)/src/filters/remove-MinusSpell-strings.hfst        \
			$(top_builddir)/src/filters/remove-PUNCT-strings.hfst             \
			$(top_builddir)/src/filters/remove-use_marg-strings.hfst          \
			$(top_builddir)/src/filters/remove-orig_lang-tags.hfst            \
			$(top_builddir)/src/filters/remove-usage_except_speller-tags.hfst \
			$(top_builddir)/src/filters/remove-Use_GC-strings.hfst            \
			$(top_builddir)/src/filters/remove-Use_minusGC-tags.hfst          \
			$(top_builddir)/src/filters/remove-Use_minus_PMatch-tags.hfst     \
			$(top_builddir)/src/filters/remove-Use_PMatch-strings.hfst        \
			$(top_builddir)/src/filters/remove-mwe-tags.hfst                  \
			$(top_builddir)/src/filters/remove-nospell-words.est.hfst         \
			$(top_builddir)/src/filters/remove-NotNorm-wordforms.est.hfst
	$(AM_V_XFST_TOOL)$(PRINTF) "set flag-is-epsilon ON\n\
		read regex \
		    @\"$(top_builddir)/src/filters/remove-usage_except_speller-tags.hfst\" \
		.o. @\"$(top_builddir)/src/filters/remove-orig_lang-tags.hfst\"        \
		.o. @\"$(top_builddir)/src/filters/remove-CLB-strings.hfst\"           \
		.o. @\"$(top_builddir)/src/filters/remove-error-strings.hfst\"         \
		.o. @\"$(top_builddir)/src/filters/remove-MinusSpell-strings.hfst\"    \
		.o. @\"$(top_builddir)/src/filters/remove-PUNCT-strings.hfst\"         \
		.o. @\"$(top_builddir)/src/filters/remove-use_marg-strings.hfst\"      \
		.o. @\"$(top_builddir)/src/filters/remove-Use_minus_PMatch-tags.hfst\" \
		.o. @\"$(top_builddir)/src/filters/remove-Use_minusGC-tags.hfst\"      \
		.o. @\"$(top_builddir)/src/filters/remove-Use_GC-strings.hfst\"        \
		.o. @\"$(top_builddir)/src/filters/remove-Use_PMatch-strings.hfst\"    \
		.o. @\"$(top_builddir)/src/filters/remove-mwe-tags.hfst\"              \
		.o. @\"$(top_builddir)/src/filters/remove-nospell-words.est.hfst\"     \
		.o. @\"$(top_builddir)/src/filters/remove-NotNorm-wordforms.est.hfst\" \
		.o. [@\"$<\" | @\"$(top_builddir)/src/fst/abbrevdot.tmp.hfst\"]        \
		;\n\
		 save stack $@\n\
		 quit\n" | $(HFST_XFST) -p $(MORE_VERBOSITY) $(HFST_FORMAT)

#### END: Local build rules for speller transducer: *.hfst ####

### BEGIN: Local build rules: *.regex ###

#editdist.default.regex: editdist-est.regex 
#	cp $< $@

# edit distance=1
# typos related to computer keyboard:
# substitute, transpose, add, delete
 
editdist-est.hfst: editdist-est.regex
	$(AM_V_RGX2FST)$(HFST_REGEXP2FST) -S $(HFST_FLAGS) -i $<\
	   --format=openfst-tropical \
		-o $@

# any accented letter
accents-est.hfst: accents-est.regex 
	$(AM_V_RGX2FST)$(HFST_REGEXP2FST) -S $(HFST_FLAGS) -i $<\
	   --format=openfst-tropical \
		-o $@

# edits that are so specific we may allow them to occur any number of times
# (they will occur only once or twice anyway)
strings-est.hfst: strings-est.regex 
	$(AM_V_RGX2FST)$(HFST_REGEXP2FST) -S $(HFST_FLAGS) -i $<\
	   --format=openfst-tropical \
		-o $@

# any number of ad hoc style accented letters may be substituted
# in addition to other edits
 
editdist.default.hfst: editdist-est.hfst strings-est.hfst accents-est.hfst
	$(AM_V_XFST)printf "\
		read regex \
		[ @\"accents-est.hfst\" .o. [@\"strings-est.hfst\" | @\"editdist-est.hfst\" ]]; \
		save stack $@\n\
		quit\n" | $(XFST_TOOL)


#### END: Local build rules: *.regex ####

# vim: set ft=automake:
